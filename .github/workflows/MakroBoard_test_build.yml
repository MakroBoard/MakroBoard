name: MakroBoard_test_build

on:
  push:
    branches: 
    - main
    - develop
    tags: [ v**]
    paths:
    - '**'
    - '!Docs/**'
    - '!packaging/Docs**'
    - '!README.md'
    - '!.github/workflows/MakroBoard_website_build.yml'
  pull_request:
    branches: 
    - main
    - develop
    tags: [ v**]
    paths:
    - '**'
    - '!Docs/**'
    - '!packaging/Docs**'
    - '!README.md'
    - '!.github/workflows/MakroBoard_website_build.yml'


jobs:

  # build_linux:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Import GPG key
  #     id: import_gpg
  #     uses: crazy-max/ghaction-import-gpg@v3
  #     with:
  #       gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
  #   - name: GPG user IDs
  #     run: |
  #       echo "fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}"
  #       echo "keyid:       ${{ steps.import_gpg.outputs.keyid }}"
  #       echo "name:        ${{ steps.import_gpg.outputs.name }}"
  #       echo "email:       ${{ steps.import_gpg.outputs.email }}"
  #   - uses: actions/setup-java@v1
  #     with:
  #       java-version: '12.x'
  #   - uses: subosito/flutter-action@v1
  #     with:
  #       flutter-version: '2.0.4'
  #   - uses: actions/checkout@v2
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v1
  #     with:
  #       dotnet-version: 5.0.x
  #   - name: Setup Android SDK
  #     uses: android-actions/setup-android@v2
  #   - name: Setup cmake
  #     uses: jwlawson/actions-setup-cmake@v1.8
  #     with:
  #       cmake-version: '3.16'
  #   - name: set Version
  #     if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
  #     run:  echo "MAKROBOARDVER=$(echo ${GITHUB_REF} | sed 's|refs/heads/||g' | sed 's|refs/tags/v||g' | sed 's|-beta||g' )" >> $GITHUB_ENV  
  #   - name: set Version
  #     if: ${{ !(startsWith(github.ref, 'refs/tags/v')) }}
  #     run:  echo "MAKROBOARDVER=1.0.0+1" >> $GITHUB_ENV  
  #   - name: get Versionnumber
  #     run:  echo "$MAKROBOARDVER" 
  #   - name: set client version
  #     run: 'sed -i "s|version: .*$|version: $MAKROBOARDVER|g" pubspec.yaml'
  #     working-directory: ./makro_board_client
  #   - name: set host msi version
  #     run: sed -i "s|Version=\".*\" M|Version=\"$MAKROBOARDVER\" M|g" Product.wxs
  #     working-directory: ./MakroBoard.Setup 
  #   - name: set client msi version
  #     run: sed -i "s|Version=\".*\" M|Version=\"$MAKROBOARDVER\" M|g" Product.wxs
  #     working-directory: ./MakroBoardClient.Setup
  #   - name: set dotnetversionnumber
  #     run:  echo "MAKROBOARDNETVER=$(echo \"$MAKROBOARDVER\" | sed 's|+|.|g')" >> $GITHUB_ENV
  #     shell: bash         
  #   - name: Install apt dependencies
  #     run: sudo apt-get update && sudo apt-get install libidn11 jq curl wget ninja-build clang tar pkg-config cmake-data libblkid-dev libgtk-3-dev liblzma-dev flatpak -y
  #   - name: install appimagekit
  #     run: wget $(curl -sL https://api.github.com/repos/AppImage/AppImageKit/releases/latest | jq -r '.assets[].browser_download_url' | grep "appimagetool-x86_64.AppImage$") && chmod +x appimagetool-x86_64.AppImage
  #   - name: flutter get dependencies
  #     working-directory: ./makro_board_client
  #     run: flutter pub get
  #   - name: flutter disable analytics
  #     working-directory: ./makro_board_client
  #     run: flutter config --no-analytics
  #   - name: flutter build web
  #     working-directory: ./makro_board_client
  #     run: flutter build web
  #   - name: flutter config linux
  #     working-directory: ./makro_board_client
  #     run: flutter config --enable-linux-desktop
  #   - name: flutter build linux
  #     working-directory: ./makro_board_client
  #     run: flutter build linux --release
  #   - name: Restore dependencies
  #     run: dotnet restore
  #   - name: copy web to dotnet
  #     run: cp -rf ./makro_board_client/build/web/* ./MakroBoard/wwwroot/
  #   - name: Build linux dotnet
  #     run: dotnet publish -r linux-x64 -c release --output Release -p:Version=$MAKROBOARDNETVER
  #   - name: Build global linux dotnet MakroBoard Plugins
  #     run: cat ./packaging/plugins/global | xargs -I % dotnet publish MakroBoard.Plugin.%/MakroBoard.Plugin.%.csproj -r linux-x64 -c release --output Release/Plugins/MakroBoard.Plugin.% -p:Version=$MAKROBOARDNETVER
  #   - name: Build linux linux dotnet MakroBoard Plugins
  #     run: cat ./packaging/plugins/linux | xargs -I % dotnet publish MakroBoard.Plugin.%/MakroBoard.Plugin.%.csproj -r linux-x64 -c release --output Release/Plugins/MakroBoard.Plugin.% -p:Version=$MAKROBOARDNETVER
  #   - name: prepare appimage linxuclient x64 dir
  #     run: mkdir -p ./appimage/MakroBoard_client_x64.AppDir &&  cp -rf ./makro_board_client/build/linux/release/bundle/* ./appimage/MakroBoard_client_x64.AppDir/ && cp ./packaging/AppImage/linuxclient_Apprun ./appimage/MakroBoard_client_x64.AppDir/AppRun && chmod +x ./appimage/MakroBoard_client_x64.AppDir/AppRun && cp ./packaging/logo.png ./appimage/MakroBoard_client_x64.AppDir/MakroBoardClient.png && cp ./packaging/AppImage/linuxclient_desktop ./appimage/MakroBoard_client_x64.AppDir/MakroBoard_client_x64.desktop
  #   - name: build appimage linuxclient x64
  #     run: ./appimagetool-x86_64.AppImage ./appimage/MakroBoard_client_x64.AppDir/ MakroBoard_client_x64.AppImage --sign -u 'gh-releases-zsync|MakroBoard|MakroBoard|latest|MakroBoard_client_x64.AppImage.zsync'
  #   - name: prepare appimage linxhost x64 dir
  #     run: mkdir -p ./appimage/MakroBoard_host_x64.AppDir &&  cp -rf ./Release/* ./appimage/MakroBoard_host_x64.AppDir/ && cp ./packaging/AppImage/linuxhost_Apprun ./appimage/MakroBoard_host_x64.AppDir/AppRun && chmod +x ./appimage/MakroBoard_host_x64.AppDir/AppRun && cp ./packaging/logo.png ./appimage/MakroBoard_host_x64.AppDir/MakroBoardHost.png && cp ./packaging/AppImage/linuxhost_desktop ./appimage/MakroBoard_host_x64.AppDir/MakroBoard_host_x64.desktop
  #   - name: build appimage linuxhost x64
  #     run: ./appimagetool-x86_64.AppImage ./appimage/MakroBoard_host_x64.AppDir/ MakroBoard_host_x64.AppImage --sign -u 'gh-releases-zsync|MakroBoard|MakroBoard|latest|MakroBoard_host_x64.AppImage.zsync'
  #   - name: make upload folders
  #     if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
  #     run: mkdir upload && mkdir upload/linuxhost_x64 && mkdir upload/linuxclient_x64 && mkdir upload/linuxclient_appimage_x64 && mkdir upload/linuxhost_appimage_x64 
  
  # && mkdir upload/android
  
  #   - name: copy linux client x64
  #     if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
  #     run: cp -rf ./makro_board_client/build/linux/release/bundle/* upload/linuxclient_x64/ && cd upload/linuxclient_x64/ && tar cfvz ../linuxclient_x64.tar.gz *
  #   - name: copy linux client appimage x64
  #     if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
  #     run: cp -rf MakroBoard_client_x64.AppImage* upload/linuxclient_appimage_x64/
  #   - name: copy linux host appimage x64
  #     if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
  #     run: cp -rf MakroBoard_host_x64.AppImage* upload/linuxhost_appimage_x64/
  #   - name: copy linux Host x64
  #     if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
  #     run: cp -rf ./Release/* upload/linuxhost_x64/ && cd upload/linuxhost_x64/ && tar cfvz ../linuxhost_x64.tar.gz *
  
  #   - uses: actions/upload-artifact@v2
  #     if: ${{ (startsWith(github.ref, 'refs/tags/v')) && !(env.ACT) }}
  #     with:
  #       name: latest_linux
  #       path: upload/
  #       retention-days: 10


  build_windows:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - uses: actions/checkout@v2
      with:
        repository: flutter/flutter
        ref: master
        path: flutter
        fetch-depth: 0
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: set Version
      if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
      run:  echo "MAKROBOARDVER=$(echo ${GITHUB_REF} | sed 's|refs/heads/||g' | sed 's|refs/tags/v||g' | sed 's|-beta||g' )" >> $GITHUB_ENV  
      shell: bash
    - name: set Version
      if: ${{ !(startsWith(github.ref, 'refs/tags/v')) }}
      run:  echo "MAKROBOARDVER=1.0.0+1" >> $GITHUB_ENV  
      shell: bash
    - name: set dotnetversionnumber
      run:  echo "MAKROBOARDNETVER=$(echo \"$MAKROBOARDVER\" | sed 's|+|.|g')" >> $GITHUB_ENV
      shell: bash   
    - name: get Versionnumber
      run:  Write-Host "$ENV:MAKROBOARDVER"
    - name: set client version
      run: 'sed -i "s|version: .*$|version: $MAKROBOARDVER|g" pubspec.yaml'
      working-directory: ./makro_board_client
      shell: bash
    - name: set host msi version
      run: sed -i "s|Version=\".*\" M|Version=$MAKROBOARDNETVER M|g" Product.wxs
      working-directory: ./MakroBoard.Setup 
      shell: bash
    - name: set client msi version
      run: sed -i "s|Version=\".*\" M|Version=$MAKROBOARDNETVER M|g" Product.wxs
      working-directory: ./MakroBoardClient.Setup
      shell: bash
    - name: check
      run: Get-Content Product.wxs
      working-directory: ./MakroBoard.Setup
    - name: check
      run: Get-Content Product.wxs
      working-directory: ./MakroBoardClient.Setup
    - name: Setup Wix
      run: Invoke-WebRequest -Uri $($($(Invoke-WebRequest -Uri https://api.github.com/repos/wixtoolset/wix3/releases/latest).Content | ConvertFrom-Json).assets | Where-Object {$_.browser_download_url -Like "*wix*-binaries.zip"}).browser_download_url -OutFile "wix.zip" && Expand-Archive ./wix.zip && Remove-Item ./wix.zip
    - name: Add Flutter and wix to path and to wix var 
      run: echo "$env:GITHUB_WORKSPACE\flutter\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append && echo "$env:GITHUB_WORKSPACE\wix" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: print env
      run: "gci env:"
    - name: Add Flutter tags
      run: git fetch origin +refs/tags/*:refs/tags/*
      working-directory: ${{ github.workspace }}/flutter
    - name: flutter config windows
      working-directory: ${{ github.workspace }}\makro_board_client
      run: flutter config --enable-windows-desktop
    - name: flutter get dependencies
      working-directory: ${{ github.workspace }}\makro_board_client
      run: flutter pub get
    - name: flutter disable analytics
      working-directory: ${{ github.workspace }}\makro_board_client
      run: flutter config --no-analytics
    - name: flutter build web
      working-directory: ${{ github.workspace }}\makro_board_client
      run: flutter build web
    - name: flutter build apk
      working-directory: ./makro_board_client
      run: flutter build apk --release
    - name: flutter build windows
      working-directory: ${{ github.workspace }}\makro_board_client
      run: flutter build windows --release
    - name: copy web to dotnet
      run: Copy-Item -Recurse -Path $($env:GITHUB_WORKSPACE + "\makro_board_client\build\web\*") -Destination $($env:GITHUB_WORKSPACE + "\MakroBoard\wwwroot\")
    - name: Restore dependencies
      run: dotnet restore
    - name: Build Windows dotnet MakroBoard
      run: dotnet publish MakroBoard\MakroBoard.csproj -r win-x64 -c release --output Release 
      #-p:Version=$MAKROBOARDNETVER -p:AssemblyVersion=$MAKROBOARDNETVER

    - name: Build global Windows dotnet MakroBoard Plugins
      run: Get-Content $($env:GITHUB_WORKSPACE + "\packaging\plugins\global") | ForEach-Object {Start-Process -FilePath "dotnet" -ArgumentList "publish MakroBoard.Plugin.$_\MakroBoard.Plugin.$_.csproj -r win-x64 -c release --output Release\Plugins\MakroBoard.Plugin.$_ -p:Version=$MAKROBOARDNETVER" } 
    - name: Build windows Windows dotnet MakroBoard Plugins
      run: Get-Content $($env:GITHUB_WORKSPACE + "\packaging\plugins\windows") | ForEach-Object {Start-Process -FilePath "dotnet" -ArgumentList "publish MakroBoard.Plugin.$_\MakroBoard.Plugin.$_.csproj -r win-x64 -c release --output Release\Plugins\MakroBoard.Plugin.$_ -p:Version=$MAKROBOARDNETVER" }
    - name: gci
      run: Get-ChildItem $env:GITHUB_WORKSPACE -Recurse    
    - name: Build MSIs dotnet
      run: msbuild /property:Configuration=Release
      working-directory: ${{ github.workspace }}\MakroBoard.Setup
      env:
          WIX: ${{ github.workspace }}\wix
    - name: make upload folders
      if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
      run: New-Item -ItemType Directory -Path $($env:GITHUB_WORKSPACE + "\upload") && New-Item -ItemType Directory -Path $($env:GITHUB_WORKSPACE + "\upload\windowshost_x64") && New-Item -ItemType Directory -Path $($env:GITHUB_WORKSPACE + "\upload\windowsclient_x64") && New-Item -ItemType Directory -Path $($env:GITHUB_WORKSPACE + "\upload\android") 
    - name: copy android
      if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
      run: cp -rf ./makro_board_client/build/app/outputs/flutter-apk/* upload/android/
    - name: copy msis
      if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
      run: Copy-Item -Recurse -Path $($env:GITHUB_WORKSPACE + "\MakroBoard.Setup\bin\Release\*.msi") -Destination $($env:GITHUB_WORKSPACE + "\upload")
    - name: copy windows client x64
      if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
      run: Copy-Item -Recurse -Path $($env:GITHUB_WORKSPACE + "\makro_board_client\build\windows\runner\Release\*") -Destination $($env:GITHUB_WORKSPACE + "\upload\windowsclient_x64\")
    - name: copy windows Host x64
      if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
      run: Copy-Item -Recurse -Path $($env:GITHUB_WORKSPACE + "\Release\*") -Destination $($env:GITHUB_WORKSPACE + "\upload\windowshost_x64\")
    - uses: actions/upload-artifact@v2
      if: ${{ (startsWith(github.ref, 'refs/tags/v')) && !(env.ACT) }}
      with:
        name: latest_windows
        path: upload/
        retention-days: 10


  # build_macos:
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions/setup-java@v1
  #     with:
  #       java-version: '12.x'
  #   - uses: subosito/flutter-action@v1
  #     with:
  #       flutter-version: '2.0.4'
  #   - name: install gsed
  #     run: brew install gnu-sed
  #   - name: set Version
  #     if: ${{ (startsWith(github.ref, 'refs/tags/v')) }}
  #     run:  echo "MAKROBOARDVER=$(echo ${GITHUB_REF} | gsed 's|refs/heads/||g' | gsed 's|refs/tags/v||g' | gsed 's|-beta||g' )" >> $GITHUB_ENV  
  #     shell: bash
  #   - name: set Version
  #     if: ${{ !(startsWith(github.ref, 'refs/tags/v')) }}
  #     run:  echo "MAKROBOARDVER=1.0.0+1" >> $GITHUB_ENV  
  #     shell: bash
  #   - name: set dotnetversionnumber
  #     run:  echo "MAKROBOARDNETVER=$(echo \"$MAKROBOARDVER\" | gsed 's|+|.|g')" >> $GITHUB_ENV
  #     shell: bash   
  #   - name: get Versionnumber
  #     run:  echo "$MAKROBOARDVER"
  #     shell: bash
  #   - name: set client version
  #     run: 'gsed -i "s|version: .*$|version: $MAKROBOARDVER|g" pubspec.yaml'
  #     working-directory: ./makro_board_client
  #     shell: bash
  #   - name: set host msi version
  #     run: gsed -i "s|Version=\".*\" M|Version=\"$MAKROBOARDVER\" M|g" Product.wxs
  #     working-directory: ./MakroBoard.Setup 
  #     shell: bash
  #   - name: set client msi version
  #     run: gsed -i "s|Version=\".*\" M|Version=\"$MAKROBOARDVER\" M|g" Product.wxs
  #     working-directory: ./MakroBoardClient.Setup
  #     shell: bash
  #   - name: flutter doctor
  #     run: flutter doctor -v
  #   - name: flutter get dependencies
  #     working-directory: ./makro_board_client
  #     run: flutter pub get
  #   - name: flutter disable analytics
  #     working-directory: ./makro_board_client
  #     run: flutter config --no-analytics
  #   - name: flutter build ios
  #     working-directory: ./makro_board_client
  #     run: flutter build ios --release --no-codesign
  #   # broken, mac needed for creation of mac desktop project
  #   # - name: flutter config macos
  #   #   working-directory: ./makro_board_client
  #   #   run: flutter config --enable-macos-desktop
  #   # - name: flutter build macos
  #   #   working-directory: ./makro_board_client
  #   #   run: flutter build macos --release
  #   - name: Restore dependencies
  #     run: dotnet restore
  #   - name: Build mac dotnet
  #     run: dotnet publish -r osx-x64 -c release  --output Release -p:Version=$MAKROBOARDNETVER
  #   - name: Build global macos dotnet MakroBoard Plugins
  #     run: cat ./packaging/plugins/global | xargs -I % dotnet publish MakroBoard.Plugin.%/MakroBoard.Plugin.%.csproj -r osx-x64 -c release --output Release/Plugins/MakroBoard.Plugin.% -p:Version=$MAKROBOARDNETVER
  #     shell: bash
  #   - name: Build macos macos dotnet MakroBoard Plugins
  #     run: cat ./packaging/plugins/macos | xargs -I % dotnet publish MakroBoard.Plugin.%/MakroBoard.Plugin.%.csproj -r osx-x64 -c release --output Release/Plugins/MakroBoard.Plugin.% -p:Version=$MAKROBOARDNETVER
  #     shell: bash



  # release:
  #    name: Release
  #    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
  #    needs:
  #    - build_linux
  #    - build_windows
  #    - build_macos
  #    runs-on: ubuntu-latest
  #    steps:
  #    - name: get artifacts
  #    - name: publish 


# flatpak for future
#

    # - name: prepare flatpak linuxclient
    #   run: mkdir -p ./flatpakbuild/linuxclient && cp  ./packaging/flatpak/org.wmsk.client.yml ./flatpakbuild/linuxclient/ && cp -rf ./makro_board_client/build/linux/release/bundle/* ./flatpakbuild/linuxclient/
    # - name: build flatpak linuxclient
    #   run: cd ./flatpakbuild/linuxclien && flatpak-builder build-dir org.wmsk.client.yml
      # - name: install flatpak SDK
      # run:  flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo && flatpak install flathub org.freedesktop.Platform//19.08 org.freedesktop.Sdk//19.08

      #runci!